---
import flatten from "lodash/flatten";

import Layout from "~/layouts/layout.astro";
import Header from "~/components/header/header.astro";
import Banner from "~/components/top-banner.astro";
import Introduction from "~/components/introduction.astro";
import TableOfContent from "~/components/table-of-content.astro";
import YearNavigator from "~/components/year-navigator.astro";
import Category from "~/components/category.astro";
import Conclusion from "~/components/conclusion.astro";
import ContributorsSection from "~/components/contributors-section.astro";
import Footer from "~/components/footer.astro";
import HtmxStyles from "~/components/htmx-styles.astro";

import settings from "~/settings/years-setup.json";
import allLanguages from "~/settings/languages.json";
import { fetchPageProps } from "~/fetch-page-props";
import LoadingIndicator from "~/components/loading-indicator.astro";

type YearSetting = { year: number; languages: string[] };

export function getStaticPaths() {
  const paths = flatten(
    settings.map(({ year, languages }) =>
      languages.map((language) => ({ year: year.toString(), language }))
    )
  ).map(({ year, language }) => ({ params: { year, language } }));
  return paths;
}

const { year: yearParam, language } = Astro.params;
const year = parseInt(yearParam!, 0);

const allYears = (settings as YearSetting[]).map((item) => item.year);

const languageCodes =
  (settings as YearSetting[]).find(({ year: y }) => y === year)?.languages ||
  [];

const languages = languageCodes.map((code) =>
  allLanguages.find((item) => item.code === code)
) as RisingStars.Language[];

const { categories, projectsByTag } = await fetchPageProps(year, language);

const topCategoryCount = 7; // categories loaded eagerly
---

<Layout year={year} language={language}>
  <Header year={year} language={language!} availableLanguages={languages} />
  <YearNavigator year={year} allYears={allYears} />
  <Banner year={year} language={language} />
  <Introduction year={year!} language={language!} />
  <div class="main">
    <TableOfContent
      projects={projectsByTag}
      categories={categories}
      year={year}
      language={language}
    />
    {
      categories
        .slice(0, topCategoryCount)
        .map((category) => (
          <Category
            category={category}
            projects={projectsByTag[category.key]}
            language={language}
            year={year}
          />
        ))
    }
    {
      categories.slice(topCategoryCount).map((category) => (
        <div
          hx-get={`/${year}/${language}/${category.key}`}
          hx-trigger="revealed"
        >
          <section class="section" id={`category-${category.key}`}>
            <div class={`container small-container`}>
              <a id={`section-${category.key}`} aria-hidden="true" />
              <div class="skeleton">
                <LoadingIndicator width={76} height={76} />
              </div>
            </div>
          </section>
        </div>
      ))
    }
  </div>
  <Conclusion year={year} language={language} />
  <ContributorsSection
    year={year}
    language={language}
    availableLanguages={languages}
  />
  <Footer />
</Layout>

<HtmxStyles />

<style>
  .skeleton {
    height: 500px;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 1px solid var(--border-color);
  }
</style>

<script is:inline>
  htmx.defineExtension("path-params", {
    onEvent: function (name, evt) {
      if (name === "htmx:configRequest") {
        evt.detail.path = evt.detail.path.replace(
          /{{([A-Za-z0-9_]+)}}/g,
          function (_, param) {
            let val = evt.detail.parameters[param];
            delete evt.detail.parameters[param]; // don't pass in query string since already in path
            return val;
          }
        );
      }
    },
  });
</script>
