---
import { getCollection } from "astro:content";
import { orderBy } from "es-toolkit";

import LoadingIndicator from "./loading-indicator.astro";

export interface Props {
  year: number;
  language: string;
  category: string;
}

const { language, year, category } = Astro.props;

const years = await getAvailableYears();
const index = years.indexOf(year);
const previousYear = index > 0 ? years[index - 1] : null;
const nextYear = index < years.length - 1 ? years[index + 1] : null;
const hasPreviousYear = previousYear !== null;
const hasNextYear = nextYear !== null;

async function getAvailableYears() {
  const items = await getCollection("categories");
  const categories = orderBy(
    items.filter((item) => item.data.find((cat) => cat.key === category)),
    ["id"],
    ["asc"],
  );

  return categories.map((item) => parseInt(item.id, 10));
}

function getRequestURL(year?: number) {
  // Use a place holder when no year is provided, will be replace by htmx `path-params` extension
  const yearPath = year || `{{year}}`;
  return `/${yearPath}/${language}/${category}`;
}
---

{
  years.length > 1 && (
    <nav>
      <LoadingIndicator height={38} width={38} />
      <div class="control has-icons-right">
        <div class="select">
          <select
            name="year"
            aria-label="Year"
            hx-ext="path-params"
            hx-get={getRequestURL()}
            hx-select="section"
            hx-trigger="change"
            hx-target="closest section"
            hx-swap="outerHTML"
            hx-indicator="closest section"
          >
            {years.map((y) => {
              return y === year ? (
                <option selected>{year}</option>
              ) : (
                <option value={y}>{y}</option>
              );
            })}
          </select>
          <div class="icon is-right">
            <svg width="24" height="24">
              <use href={`/sprite.svg#chevron-down-icon`} />
            </svg>
          </div>
        </div>
      </div>

      <button
        type="button"
        class="button"
        disabled={!hasPreviousYear}
        aria-label="Previous year"
        title={hasPreviousYear ? `Go to ${previousYear}` : undefined}
        hx-get={getRequestURL(previousYear!)}
        hx-select="section"
        hx-trigger="click"
        hx-target="closest section"
        hx-swap="outerHTML"
        hx-indicator="closest section"
      >
        <svg width="20" height="20">
          <use href={`/sprite.svg#arrow-left-icon`} />
        </svg>
      </button>
      <button
        type="button"
        class="button"
        disabled={!hasNextYear}
        aria-label="Next year"
        title={hasNextYear ? `Go to ${nextYear}` : undefined}
        hx-get={getRequestURL(nextYear!)}
        hx-select="section"
        hx-trigger="click"
        hx-target="closest section"
        hx-swap="outerHTML"
        hx-indicator="closest section"
      >
        <svg width="20" height="20">
          <use href={`/sprite.svg#arrow-right-icon`} />
        </svg>
      </button>
    </nav>
  )
}

<style>
  nav {
    display: flex;
    gap: 10px;
  }
  button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0;
    border-color: var(--grey3);
    height: 36px;
    width: 36px;
    color: inherit;
  }
  button[disabled] {
    color: var(--grey3);
  }
  .select select {
    background-color: transparent;
  }
  .select:hover select {
    background-color: white;
  }
  .select:hover .icon {
    color: var(--orange);
  }
</style>
