---
import { remark } from "remark";
import remarkHtml from "remark-html";

import { getCollection } from "astro:content";

import { getProjectData } from "~/fetch-page-props";
import { getProjectsBySlug } from "~/utils/process-project-data";

export interface Props {
  id: string;
  language: string;
  year: number;
}

const { id, language, year } = Astro.props;

const comments = await getCollection("comments");

const comment = comments.find(
  (comment) => comment.id === `${year}/${language}/${id}.md`,
);
if (!comment)
  throw new Error(`Content not found: ${year}/${language}/${id}.md`);

const { projects } = await getProjectData(year);

const projectsBySlug = getProjectsBySlug(projects);
const processedContent = replaceProjectSlugsWithLinks(
  projectsBySlug,
  comment.body,
);

const html = await remark().use(remarkHtml).process(processedContent);

// TODO create a plugin to process the markdown so that we can use this:
// const { Content } = await comment.render();

function replaceProjectSlugsWithLinks(
  projectsBySlug: Map<string, RisingStars.Project>,
  md: string,
) {
  const processed = md.replace(/{(.+?)}/gi, (_, slug) => {
    const project = projectsBySlug.get(slug.toLowerCase());
    if (!project) {
      return slug;
    }
    const url = project.url || `https://github.com/${project.full_name}`;
    return `[${project.name}](${url})`;
  });
  return processed;
}
---

<div class="markdown-body" set:html={html} />
