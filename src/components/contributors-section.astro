---
import { getCollection } from "astro:content";

import TeamMember from "~/components/team-member.astro";
import { getContributorsByYear } from "~/settings/contributors-by-year";

export interface Props {
  year: number;
  language: string;
  availableLanguages: RisingStars.Language[];
}
const { year, language, availableLanguages } = Astro.props;

const contributors = await getCollection("contributors");

const thisYearContributors = getContributorsByYear(year);

function getContributorByUserName(userName: string) {
  const found = contributors.find(
    (member) => member.data.userName === userName,
  );
  if (!found) {
    throw new Error(`Contributor not found: ${userName}`);
  }
  return found;
}

const translations = {
  ja: "Japanese version",
  zh: "Chinese (simplified) version",
  es: "Spanish version",
  id: "Bahasa Indonesia",
  ru: "Russian version",
  ko: "Korean version",
};

// TODO type correctly language parameters
const thisYearTranslators =
  thisYearContributors.translators?.[
    language as keyof typeof translations
  ]?.map(getContributorByUserName) || [];

const thisYearAuthors = thisYearContributors.authors.map(
  getContributorByUserName,
);
---

<section>
  <div class="container small-container">
    {
      thisYearTranslators.length > 0 && (
        <div>
          <p class="member-list-header">
            {translations[language as keyof typeof translations]}
          </p>
          <div class="translator-list">
            {thisYearTranslators.map((translator) => (
              <TeamMember member={translator} />
            ))}
          </div>
        </div>
      )
    }
    <div>
      <p class="member-list-header">Authors</p>
      <div class="translator-list">
        {thisYearAuthors.map((author) => <TeamMember member={author} />)}
      </div>
    </div>
    {
      availableLanguages.length > 1 && (
        <div class="available-languages">
          <p class="member-list-header">Available Translations</p>
          {availableLanguages
            .filter((lang) => lang.code !== language)
            .map((lang) => (
              <p>
                <a href={`/${year}/${lang.code}`}>{lang.text}</a>
              </p>
            ))}
        </div>
      )
    }
  </div>
</section>

<style>
  section {
    padding: 2rem 0;
    background-color: #b94100;
    background: linear-gradient(135deg, #ed8518, #e75f16, #b94100);
    color: rgba(255, 255, 255, 0.6);
  }

  section .container {
    display: flex;
    flex-direction: column;
    gap: 2rem;
    padding: 0 1rem;
  }

  @media (min-width: 750px) {
    .container {
      padding: 0rem;
    }
  }
  a {
    color: #fbf3ef;
  }
  a:hover {
    color: #fbf3ef;
    text-decoration: underline;
  }
  .member-list-header {
    color: rgba(255, 255, 255, 0.95);
    margin-top: 0;
    text-align: left;
    font-size: 1.4rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.3);
  }
</style>
