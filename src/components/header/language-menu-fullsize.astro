---
export type Props = {
  year: number;
  languages: RisingStars.Language[];
  currentLanguage: string;
};

const { year, languages, currentLanguage } = Astro.props;
---

<div class="language-menu">
  {
    languages.map((lang) => {
      if (currentLanguage === lang.code) {
        return <span class="language-menu-item is-active">{lang.text}</span>;
      }
      return (
        <a href={`/${year}/${lang.code}`} class="language-menu-item">
          {lang.text}
        </a>
      );
    })
  }
</div>

<style>
  .language-menu {
    display: none;
  }

  @media (min-width: 750px) {
    .language-menu {
      height: 100%;
      align-items: center;
      display: flex;
      justify-content: flex-end;
    }
  }

  .language-menu-item {
    padding: 0 1rem;
    height: 100%;
    display: flex;
    align-items: center;
    color: var(--linkColor);
  }

  .language-menu-item:hover {
    color: var(--activeLinkColor);
  }

  .language-menu-item.is-active {
    display: none;
    color: var(--activeLinkColor);
    margin-bottom: -2px;
  }

  @media (min-width: 750px) {
    .language-menu-item {
      display: flex;
    }
  }
</style>
